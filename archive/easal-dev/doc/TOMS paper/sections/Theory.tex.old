\section{Overview of Theory Underlying EASAL}
\label{theory}

Strategies
\begin{enumerate}
\item Stratification and Atlasing
\item Recursive 1D descent
\item Cayley Convexification
\end{enumerate}
The EASAL software\footnote{Source code, optional GUI and user/developer guide
available at \url{https://bitbucket.org/geoplexity/easal}.\\A video
demonstrating EASAL in action is available at
\url{http://www.cise.ufl.edu/~sitharam/EASALvideo.mpg}.} is based on the
theoretical concepts described in this section. 

EASAL partitions, organizes and samples the configuration space based on the
set of active constraints. It organizes the active constraint regions by building a 
directed acyclic graph that describes the relationship between two active 
constraint regions that differ by one active constraint (a child has one active 
constraint in addition to its parent's active constraints). When $k=2$, 
effective dimension of each active constraint region plus the number of active 
constraints is always 6. Thus, the number of active constraints gnereically 
determines the dimension of each active constraint region.

Using a new theoretical framework developed in \cite{SiGa:2010}, EASAL maps 
(many to one) each d-dimensional active constraint region, to a region
of $R^d$ called the Cayley space. We call this process, the convexification of
active constratint regions. The Cayley space is convex in most cases, and
allows for efficient sampling using finite sampling methods.  This is in
contrast to many other methods such as MC and MD, which can only make
small/differential motions away from a current configuration. Where the active
constraint regions are not convex, we develop strategies (ray tracing,
discussed later) to sample efficiently.

While sampling, EASAL starts from the interior of an active constraint region
and locates boundaries of strictly one dimension less than the interior. Then, 
it moves to the interior of the boundaries and continues recursively finding its
boundaries and so on. Since EASAL only looks for boundaries one dimension less
at every stage, it has a higher chance of success than looking for the lowest
dimensional active constraint region directly. Furthermore, when an active
constraint region is found, all its ancestor active constraint regions are also
discovered. Due to this reason, even if a ``small'' active constraint region is
missed at some stage, if any of its descendants is found at a later stage, say
via a larger sibling, then the active constraint region is guaranteed to be
found.


A more precise description of the theory requires basic combinatorial rigidity
background. We introduce some basic concepts here and refer the reader to
\cite{CombinatorialRigidity} for others.

A \emph{linkage} is a graph, $G = (V, E)$, of vertices and edges, with an
assignment of lengths, $\delta: E \rightarrow  \mathbf{R}$, for each edge.  A
(Euclidean) \emph{realization} of a linkage in $\mathbf{R}^3$ is an assignment 
of points in  $\mathbf{R}^3$ to vertices (a point configuration modulo the 6 
rotations and translations i.e., the group SE(3)) such that the Euclidean 
distance between pairs of points are consistent with the given edge lengths 
$\delta$. A realization is said to be \emph{locally rigid} if there is no other realization
in its neighborhood that has the same edge lengths. A graph is said to be rigid
if a generic linkage realization of the graph is locally rigid.  Otherwise, the
graph is said to be flexible.  When the realization is locally rigid, the
non-edges have locally fixed lengths and are said to be locally \emph{implied}
or \emph{dependent}. If the edges of $G$ were assigned length intervals instead 
of fixed lengths, we get what is called an \emph{active constraint linkage}, 
which is a generalization of a linkage.

The generic degrees of freedom (dof) of a graph is the minimum number of edges
whose addition makes it locally rigid. Thus, the number of degrees of freedom
is the same as the generic dimension of the realization space or configuration
space of a linkage of the graph.  We now describe in detail, the theory
behind EASAL algorithms.


\subsection{Stratification: Partitioning the Configuration Space into
Active Constraint Regions}
\label{sec:stratification}

\emph{Stratification} is the process of mapping the topology of the
configuration space of an active constraint linkage by recursively partitioning
it into sub-regions of lower dimensions. Each of these sub-regions is
characterized by the set of satisfied or active constraints, and are hence
called active constraint regions. The set of active constraints is represented
by its \emph{active constraint graph} as shown in \figref{fig:pctree}. The
vertices in the active constraint graph are the participating point markers (at
least 3 points in each set). The edges are of two types, the ones between
points in the same rigid point set and the active constraints which connect
points in different point sets. All active constraint edge lengths are fixed to 
lie in small intervals, yielding an active constraint linkage. The active 
constraint region of an active constraint linkage is the set of all realizations 
where, the edges lengths fall in the interval.


\def\wid{0.45\linewidth}
\begin{figure}
 \centering
 \psfrag{Reg1}{$R_{d=1}$}
 \psfrag{Reg2}{$R_{d=2}$}
 \psfrag{Reg3}{$R_{d=3}$}
 \psfrag{CG}[c]{\hskip1cm\acg}
 \psfrag{node2}{2D node}
 \psfrag{node3}{3d node}
 \psfrag{node4}{4d node}
 \psfrag{realize}{Realizations}
 \subfigure[Cayley charts of a 2D atlas node with its children and parents]
 {\label{fig:pctree}\includegraphics[width=60mm]{\fig/pctreeSpacesPink.png}}
 \hskip0.01\linewidth
 %
 \subfigure[Cartesian realization of a 2D atlas node with its children and
 parents.]{\includegraphics[width=60mm]{\fig/pctreeFlipsPink.png}}
 \caption{\footnotesize {\bf Parent and child (boundary) regions of a 2D region
 of a toy \atlas.}
 In both (a) and (b) an \acr\ $\mathbf{R}_{d=2}$ of dimension
 $d=2$ is represented by the central node.
 In (a) one of its direct parent regions is marked as $\mathbf{R}_{d=3}$ and
 one of its boundary regions as $\mathbf{R}_{d=1}$.
 In addition to these convex Cayley parameterized charts, EASAL displays
 the active constraint graph. Note the hole in $\mathbf{R}_{d=2}$.
 Although the chart of the region is exact and convex,
 a posteriori constraint violation check causes convex infeasible to be cut out.
 $\mathbf{R}_{d=2}$ appears as a boundary region in $\mathbf{R}_{d=3}$.
 (b)
 Three grey fans display sweeps of \Cr s of a point in their node.
 }\label{fig:NestedRegions}
\end{figure}

When $k=2$, the effective dimension of the active
constraint region plus the number of active constraints is always 6. Thus, the
number of active constraints genericaly determines the dimension of the
configuration space. Inactive constraints do not restrict the dimension of
active constraint region, i.e., the  active constraint graph has an independent
subgraph that determines the dimension of the configuration space and locally
implies all other active constraints.  It is possible for some implied nonedges
to be inactive, in fact, this is more typical.

%\begin{figure*}
%\begin{center}
%\includegraphics[width=.6\linewidth]{\fig/Stratification_pink2.eps}
%\end{center}
%\caption{Stratification of a toy constraint system shown as a directed acyclic
%graph with nodes representing active constraint regions of dimension 4 (cyan),
%3 (blue), 2 (purple), 1 (yellow), and 0 (green). Edges indicate containment in
%a parent region one dimension higher. The constraint system is shown in the
%lower right inset.} 
%\label{fig:natlas}
%\end{figure*}


In the software, the stratification is visualized by what we call an
\emph{atlas}. The atlas is organized as a directed acyclic graph (see
\figref{fig:exampleStratification}), where a node represents an active
constraint region of the configuration space.  Edges between two nodes indicate
containment of the lower dimensional node in a parent region one dimension
higher (one fewer active constraint). Alternatively, a child region is a
boundary region of the parent with one additional active constraint. The atlas
is organized into strata, one for each dimension and edges exist only between
adjacent strata.  The stratification regions are populated by sampling in their
corresponding convex Cayley regions (described later).

Active constraint regions are bound by maximally stretched or maximally
compressed configurations, beyond which, tetrahedral inequalities are violated.
We call these, \emph{tetrahedral bounds}.  The boundaries of an active
constraint region are configurations where new constraints become active and
lead to the discovery of children active constraint regions. Beyond the
boundaries, the configurations are infeasible and within the boundaries no new
constraints become active. Boundaries are strictly one dimension less than the
interior. For instance, if there is a region with the active constraint set $H
\cup \{a\} \cup \{b\}$, then the region with active constraint set $H$ has at
least 2 boundary regions, one with active constraint set $H \cup \{a\}$ and
another with active constraint set  $H \cup \{b\}$ as the active constraints.
Both of these are parents of the region with active constraint set $H \cup
\{a\} \cup \{b\}$.

\begin{figure*}
\begin{center}
\includegraphics[scale=0.22]{\fig/2DConfigExample3-2.jpg}
\end{center}
\caption{Stratification of a toy constraint system shown as a directed acyclic
graph (DAG), with nodes represented by their corresponding active constraint graphs.
All nodes in the left column have two degrees of freedom and are as such 2D
nodes. Adding on extra constraint to any of these nodes gives us the 1D nodes
in the center column which have 1 degree of freedom. By adding an extra
constraint to the nodes in the center colum, we get the rigid 0D nodes shown in
the right column. A DAG edge here indicates the containment of the child region in
a parent region 1 dimension higher.} 
\label{fig:exampleStratification}
\end{figure*}



The algorithm starts from the interior of an active constraint region and
locates boundaries of strictly one dimension less than the interior. Then, it
moves to the interior of the boundaries and continues recursively finding its
boundaries and so on.  Since EASAL only looks for boundaries one dimension less
at every stage, it has a higher chance of success than looking for lowest
dimensional regions directly.  Furthermore, when a region is found, all its
ancestors (supergraphs) are added to the atlas.  Due to this reason, even if a
``small'' region is missed at  some stage, if any of its descendants is found
at a later stage, say via a larger sibling, then the region is guaranteed to be
added.

\noindent\textbf{Toy Example:}

\noindent In Figure \figref{fig:exampleStratification} we show the
stratification of a sample input in 2D. Consider two point sets, point set $A$
consisting of points $a_1$, $a_2$, and $a_3$ and point set $B$ consisting of
points $b_1$ and $b_2$ respectively. A complete stratification of this
constraint system is shown as a directed acyclic graph (DAG), with nodes
represented by their corresponding active constraint graphs.  Each node in this
toy atlas is represented by its corresponding active constraint graph.  All
nodes in the left column have two degrees of freedom and are as such 2D nodes.
Adding on extra constraint to any of these nodes gives us the 1D nodes in the
center column which have 1 degree of freedom. By adding an extra constraint to
the nodes in the center colum, we get the rigid 0D nodes shown in the right
column. A DAG edge here indicates the containment of the child region in a
parent region 1 dimension higher.



\subsection{Convexification of Active Constraint Regions}
\label{sec:convexification} 

The theory of convex Cayley configuration spaces gives a characterization of
active constraint graphs that lead to convex parameterization of corresponding
linkage configuration spaces \cite{SiGa:2010}. Here we briefly describe 
the theory and how it is used in EASAL.

As stated earlier, all edge lengths in the graph are fixed to lie in small
intervals yielding an active constraint linkage. One way to describe
realizations of a flexible linkage is to specify a set of non-edges and their
lengths, that cause that realization to be rigid. The non-edges are called
\emph{Cayley parameters} and correspond to the independent flexes. 

In this paper, Cayley parameters are distances local to the given active
constraint region between point-pairs that are inactive (not fixed).  The
theory of Cayley configuration spaces utilizes graphs called 3-trees.  A
\emph{complete 3-tree}, is any graph obtained by starting with a triangle and
successively pasting a \emph{tetrahedron}, or a complete graph on 4 vertices,
onto a triangle in the current graph . A \emph{partial 3-tree} is any subgraph
of complete 3-tree.  Whenever the active constraint graphs are partial 3-trees
choosing non-edges that complete the partial 3-tree into a complete 3-tree as
Cayley parameters always yields a convex Cayley parameterization of the linkage
configuration space.  The active constraint graph allows creation of
efficiently computable charts for all convex configuration regions, that
exactly parameterize the region and its boundaries. 


More precisely, the non-edge set $F$ whose addition completes the active
constraint graph (converts a partial 3-tree into the complete 3-tree) is chosen
for the convex parametrization as stated in the following theorem. The set of
edge lengths $d_F$ of $F$ for which the graph $H \cup F$ with edge lengths
$d_H$ and $d_F$ is realizable is called a \emph{chart} denoted by $\Phi_F(H\cup
F, d_F)$ i.e., $\Phi_F(H\cup F, d_H) := \{d_F: (H\cup F, d_H, d_F)$ is
realizable in $\mathbf{R}^3\}$

\begin{theorem}{(\cite{SiGa:2010} partial 3-tree yields exact convex chart)}
\label{thm}
If an active constraint graph $G_H = (V, H)$ is a partial 3-tree then, by
adding edge set $F$ to give a complete 3-tree $G = (V, E = F \cup H)$, we
obtain an exact convex chart $\Phi_F (G, H, d_H)$ in the parameters $F$
of the active constraint region $R_{G_H}$. The exact convex chart $\Phi_F (G,
H, d_H)$ has a linear number of boundaries in $|G|$ that can be output as
implicit quadratic polynomial equalities in linear time. These equalities
determine tetrahedral volume (Cayley-Menger determinants).  If
we fix the parameters in $F$ in sequence, their explicit bounds can be computed
in quadratic time in $|G|$.  \end{theorem}

\begin{figure}
\centering
\includegraphics[scale=0.35] {\fig/partial3tree_new.png}
\includegraphics[scale=0.35] {\fig/partial3tree_new_2.png}
\caption{All 3-tree active constraint graphs for $k = 2$ rigid bodies in $R^3$.
It should be noted that the vertices on the left and the right of this graph
form a complete graph (edges not shown) since the points on each node belong to
a rigid unit.  The label $m_1*m_2$ below each active constraint graph indicates
that $m_1$ points in set $M_1$ are actively constrained with respect to $m_2$
points in set $M_2$ . Solid edges indicate pairs whose distance is in the
preferred interval, i.e., constraint is active.}
\label{fig:3-trees}
\end{figure}


\begin{figure*}
\begin{center}
\includegraphics[width=.6\linewidth]{\fig/ConfigSpaceExample.jpg}
\end{center}
\caption{ The figure on the left shows a linkage realization (see text for
description) in 2D .  The figure on the right shows the corresponding 2D convex
Cayley configuration space for the given linkage and the given Cayley
parameters $e1$ and $e2$.} 
\label{fig:2DCayely}
\end{figure*}


Given that complete 3-trees are not only rigid but their finitely many
Cartesian realizations can be efficiently computed from any given values of 
Cayley parameters, convexification greatly improves the efficiency of sampling.
Therefore, in EASAL we try to sample in convex regions whenever possible. It
turns out that almost all active constraint graphs arising from constraint
systems as in Equation \eqref{eqn:constraints} for $k = 2$ are partial 3-trees
and thus have an efficient Cayley parameterization such as the exact convex
chart shown in \figref{fig:3-trees}. However due to the presence of additional
constraints between pairs that are neither edges nor Cayley parameters in the
active constraint graph, the feasible region is in fact obtained by carving out
a convex region from the Cayley configuration space of a partial 3-tree.


A Cayley configuration for this parametrization is a tuple of lengths of the
Cayley parameters for which finitely many realizations exist. The Cayley
configuration space, shown as the shaded area in right figure
\figref{fig:2DCayely}, is the set of all such length-tuples. As can be seen
from this example, the number of Cayley parameters is the dimension of the
Cayley configuration space and of the realization space, which in this case is
2.  When the realization dimension is 3, instead of 2 as in in this example, we 
use 3-tree graphs and complete partial 3-trees to get complete 3-trees. 

\noindent\textbf{Toy Example}

\noindent Here we illustrate the concept of Cayley parameterization using the
first node in Figure \figref{fig:exampleStratification} as the example input.
Since the realization dimension in this example is 2D, we use graphs called
2-trees instead of the 3-tree graphs used in EASAL, in which the realization
dimension is 3D.  A \emph{complete 2-tree}, is any graph obtained by starting
with an edge and successively pasting a triangle onto an edge in the current
graph.  A \emph{partial 2-tree} is any subgraph of complete 2-tree.

Consider the active constraint graph shown in Figure \figref{fig:2DCayely},
which is a partial 2-tree.  To describe the configuration space of this
flexible linkage, we add the non-edges $e1$ and $e2$ shown with dotted lines,
to complete the 2-tree. This not only makes the linkage rigid, but makes it
very easy to realize the graph. The non-edges $e1$ and $e2$ are called
Cayley parameters and correspond to the independent flexes.  As can be seen
from the figure on the right in Figure \figref{fig:2DCayely} the configuration
space obtained in convex and allows for efficient sampling.

\subsection{Cartesian realization from a Cayley configuration}
\label{sec:realization} Since the Cayley configuration space of an active
constraint region is convex when the active constraint graph is a partial
3-tree and since the bounds on the Cayley parameters can be computed by Theorem
\ref{thm}, exploring the Cayley configuration space can be done efficiently.
Moreover, finding a Cartesian realization of each Cayley configuration in the
Cayley configuration space is straightforward. In Section
\ref{sec:algRealization} we explain how to find the Cartesian realization of a
Cayley configuration (namely a setting of length values to the Cayley
parameters). Figure \ref{fig:NestedRegions} shows the Cayley configuration
spaces as well as the realization spaces of an atlas region together with its
children and parent regions.
